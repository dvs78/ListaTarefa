--------------------------------------------------------------------------------------------
1 PASSO - INSTALAR O VITE
Digitar no terminal: npm create vite@latest .
O espa√ßo e ponto e para inidicar a cria√ß√£o do vite justamente na pasta em quest√£o
React
JavaScript

Digitar no terminal:
npm i
√â a mesma coisa de npm install, √© abrevia√ß√£o, mas e para inidicar a cria√ß√£o dos pacotes (bibliotecas ou m√≥dulos) do node na pasta em quest√£o, vai criar o arquivo node_modules
Toda vez que digitar npm run dev, vai rodar o vite, √© s√≥ olhar na pasta package.json em scripts
Quando digitar npm run build, vai rodar o vite build, √© s√≥ olhar na pasta package.json em scripts

Digitar no terminal:
npm run dev

Excluir a pasta public
Na pasta .gitignore deixar somente = node_modules
Na pasta assets
Excluir App.css
No arquivo App.jsx deixar assim:

function App() {
  return <></>;
}
export default App;

No arquivo index.css, ecluir todo conte√∫do
No arquivo main.jsx, n√£o precisa alterar
Excluir o arquivo README.md


--------------------------------------------------------------------------------------------
2 PASSO - INSTALAR C√ìDIGO DO FONT AWESOME React
Ir no site, clicar em docs => view the docs => Integrations => React => Set Up with React

Rolar para baixo at√© Add SVG Core e pegar o c√≥digo e rodar no terminal
npm i --save @fortawesome/fontawesome-svg-core

Rolar mais para baixo at√© Add Icons Packages e pegar o c√≥digo em Free SVG Icon Package e rodar no terminal tudo de uma vez s√≥
npm i --save @fortawesome/free-solid-svg-icons
npm i --save @fortawesome/free-regular-svg-icons
npm i --save @fortawesome/free-brands-svg-icons

Rolar mais para baixo at√© Add React Component e pegar o c√≥digo e rodar no terminal
npm i --save @fortawesome/react-fontawesome@latest

Colocar no arquivo onde for utilizar o √≠cone
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";

E para instalar o √≠cnone precisa importar - React / Individual import
<FontAwesomeIcon icon={faCirclePlay} />


--------------------------------------------------------------------------------------------
3 PASSO - SUBIR PROJETO PARA O GITHUB
Antes, no arquivo .gitignore, deve ficar assim:
node_modules
.env

Abrir o github:
Ir em new
Colocar o nome do reposit√≥rio, ex: ViveiroLimeiraGit
Deixar em p√∫blico
Clicar em criar reposit√≥rio

Agora √© ir para o VS Code 
Abrir na pasta global
Digite no terminal:
git init, vai deixar os arquivos U
git add .
git commit -m "Fazendo o 1 commit"
Em or push an existing repository from the comnad line
Copiar todos os c√≥digos e rodar no terminal:
Ex:
git remote add origin https://github.com/dvs78/ViveiroLimeiraReact.git
git branch -M main
git push -u origin main



1. Avisos de "LF will be replaced by CRLF"
Isso √© apenas um aviso de que as quebras de linha no seu projeto (LF ‚Äî estilo Unix) est√£o sendo convertidas para o estilo do Windows (CRLF). Voc√™ pode:

üëâ Ignorar os avisos
Eles n√£o impedem o funcionamento nem o commit dos arquivos.

üëâ Ou corrigir globalmente no Git:
Digite no terminal:
git config --global core.autocrlf true
Esse comando faz o Git converter LF para CRLF no checkout e reverter para LF no commit.

 Solu√ß√£o estrutural (recomendada): Corrigir o loop de depend√™ncias
Sua estrutura tem isso:

arduino
Copiar
Editar
back-end/node_modules/lista_tarefa/back-end/node_modules/lista_tarefa/back-end/...
Isso parece indicar um erro no package.json ou loop de importa√ß√µes onde um m√≥dulo est√° incluindo ele mesmo recursivamente.

Recomendo:

Apagar a pasta node_modules completamente:
Digite no terminal:
Remove-Item -Recurse -Force .\node_modules
Ou, se estiver na raiz do projeto:
Digite no terminal:
Remove-Item -Recurse -Force node_modules

Apagar tamb√©m o package-lock.json:
Digite no terminal:
Remove-Item -Force package-lock.json

Depois, reinstalar tudo corretamente:
Digite no terminal:
npm install

Criar uma p√°gina .gitignore no back-end tamb√©m

--------------------------------------------------------------------------------------------
5 PASSO - INSTALAR PACOTE PARA RE-RENDERIZAR P√ÅGINAS
Abrir na pasta global
Digitar no terminal:
npm i react-router-dom

Importar dentro do arquivo App.jsx
import { BrowserRouter, Routes, Route } from "react-router-dom";

O que √© BrowserRouter: vai gerenciar as rotas. Browser = navegador, Router = roteador
Agora as p√°ginas s√£o componenetes que ser√£o re-renderizados num mesmo documento, 
ou se √© certo dizer, na mesma p√°gina

ESTAVA ASSIM:
import { BrowserRouter, Routes, Route } from "react-router-dom";
import Header from "./components/Header";
import Home from "./Pages/Home/Home";

function App() {
  return (
    <div className="app__components">
      <Header />
      <Home />
    </div>
  );
}

export default App;

FICOU ASSIM:
import { BrowserRouter, Routes, Route } from "react-router-dom";
import Header from "./components/Header";
import Home from "./Pages/Home/Home";
import Login from "./Pages/Login/login";

function App() {
  return (
    <div className="app__components">
      <Header />
      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/login" element={<Login />} />
      </Routes>
    </div>
  );
}

export default App;


IR NO main.jsx e alterar
ESTAVA ASSIM:
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.jsx'

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <App />
  </StrictMode>,
)

FICOU ASSIM:
import { StrictMode } from "react";
import { createRoot } from "react-dom/client";
import "./index.css";
import App from "./App.jsx";
import { BrowserRouter } from "react-router-dom";

createRoot(document.getElementById("root")).render(
  <StrictMode>
    <BrowserRouter>
      <App />
    </BrowserRouter>
  </StrictMode>
);


--------------------------------------------------------------------------------------------
6 PASSO - CONSTRUIR A API - APPLICATION PROGRAMING INTERFACE (Interface de programa√ß√£o de aplica√ß√µes)
Sistema utilizado para comunica√ß√£o de 2 entidades, ou seja, 2 computadores
Criar uma pasta fron-end e colar todos os arquivos criados at√© agora
Criar a pasta back-end para montar a API
Ir para back-end no terminal
Criar um package.json, digitar o c√≥digo abaixo. O -y √© s√≥ para trazer todas as configura√ß√µes padr√£o desse projeto aquivos
npm init -y

Colocar no package.json, depois de description "type": "module",

Instalar express e pgadmin
npm install express pg

express: framework para criar a API HTTP.
pg: cliente PostgreSQL para Node.js.

Em back-end criar a pasta apiBackEnd e dentro dela o arquivo server.js

!!!!!!!!!!!!!!Tentar colocar nodemon ou node --watch


--------------------------------------------------------------------------------------------
7 PASSO - CONTINUA√á√ÉO DA API
NO arquivo server.js, deixar assim:

// API significa Application Programing interface
// POST, GET, PUT, DELETE
// CRUD - CREATE, READ, UPDATE e DELETE
// Endpoint

import express from "express";

const app = express();

const PORT = 3000;
app.listen(PORT, () => {
  console.log(`Servidor est√° escutando na porta ${PORT}`);
});

mata o servidor e executa o arquivo server.js
node .\api\server.js

Mas sempre que alterar o c√≥digo, tem que matar o servidor e reiniciar novamente
Para n√£o ter que fazer isso tem que colocar watch
node --watch .\api-back-end\server.js, n√£o fiz isso, n√£o sei onde fazer

Alguns treinos na web
// app.get("/", async (req, res) => {
//   res.send("Por enquanto s√≥ estou com construindo endpoint '/clientes'");
// });

abrir o google e rodar localhost:3000


--------------------------------------------------------------------------------------------
8 PASSO - CRIAR A PASTA API NO FRONT-ENDPOINT
Criar a pasta apiFrontEnd no front-end e dentro dela apiFrontEnd.js
Instalar o axios no front-end
Digitar no terminal do front-end
npm i axios


9 PASSO - CORS
Middleware, para resolver o problema do front e back que est√£o em portas diferentes,
cors: middleware que permite requisi√ß√µes entre front-end e back-end.
Ir para pasta back-end
Digitar no terminal
Rodar no arquivo server.js, n√£o fiz isso
npm i cors

Colar no arquivo server.js:
import cors from "cors";

app.use(cors());
app.use(express.json());

VAI FICAR ASSIM:
// API significa Application Programing interface
// POST, GET, PUT, DELETE
// CRUD - CREATE, READ, UPDATE e DELETE
// Endpoint

import express from "express";
import cors from "cors";

const app = express();

app.use(cors());
app.use(express.json());

app.get("/", async (req, res) => {
  res.send("Por enquanto s√≥ estou com construindo endpoint '/clientes'");
});

const PORT = 3000;
app.listen(PORT, () => {
  console.log(`Servidor est√° escutando na porta ${PORT}`);
});


ALTERAR ENDPOINT
√â necess√°rio para n√£o confundir com aquivos.js que ter√£o o mesmo nome do endpoint
Ex:
app.use("/api/carrinho", rotasTarefas);

--------------------------------------------------------------------------------------------
10 PASSO - CRIAR O BANCO DE DADOS NO pgadmin

-- CRIA√á√ÉO DA TABELA TAREFAS
CREATE TABLE IF NOT EXISTS public.tarefas(
  id SERIAL PRIMARY KEY,  -- id UUID DEFAULT gen_random_uuid() PRIMARY KEY, 
  email TEXT NOT NULL,
  nome TEXT NOT NULL,
  tarefa TEXT NOT NULL
);


--------------------------------------------------------------------------------------------
11 PASSO - CONECTAR O nodejs COM O BANCO pg admin
Criar o c√≥digo abaixo para conectar o nodejs com banco de dados
Digitar no server.js:

import pg from "pg";

const pool = new pg.Pool({
  host: "localhost",
  port: 5432,
  user: "postgres",
  password: "Limao_10",
  database: "ViveiroLimeira",
});

console.log((await pool.query("SELECT * FROM clientes")).rows);

MEU ARQUIVO EST√Å ASSIM:
// API significa Application Programing interface
// POST, GET, PUT, DELETE
// CRUD - CREATE, READ, UPDATE e DELETE
// Endpoint

import express from "express";
import cors from "cors";
import pg from "pg";

const pool = new pg.Pool({
  host: "localhost",
  port: 5432,
  user: "postgres",
  password: "Limao_10",
  database: "Lembretes",
});

console.log((await pool.query("SELECT * FROM tarefas")).rows);

const app = express();

app.use(cors());
app.use(express.json());

app.get("/", async (req, res) => {
  res.send("Por enquanto s√≥ estou com construindo endpoint '/clientes'");
});

const PORT = 3000;
app.listen(PORT, () => {
  console.log(`Servidor est√° escutando na porta ${PORT}`);
});

Rodar o node ./server.js e conferir se deu certo


--------------------------------------------------------------------------------------------
12 PASSO - CRIAR O ARQUIVO .env PARA DEIXAR OS DADOS DE CONEX√ÉO SEGUROS
S√£o as vari√°veis que n√£o ser√£o compartilhadas com terceiros
Criar arquivo .env no back-end

Colocar no arquivo .env:
DB_HOST=localhost
DB_PORT=5432
DB_USER=postgres
DB_PASSWORD=Limao_10
DB_DATABASE=Lembretes

Digitar no terminal, na pasta back-end:
npm install dotenv
npm install dotenv = serve para ter acesso as vari√°veis de ambiente

Colocar na server.js = import "dotenv/config"
Vers√µes mais novas n√£o precisam do dotenv, n√£o deu certo. Precisei instalar

Alterar o arquivo server.js
const pool = new pg.Pool({
  host: process.env.DB_HOST,
  port: process.env.DB_PORT,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_DATABASE,
});

Rodar o node ./server.js e conferir se deu certo


--------------------------------------------------------------------------------------------
13 PASSO - CRIAR AS ESTRUTURAS DO CRUD
Criar a pasta crud em back-end
POST, GET, PUT, DELETE
CRUD - CREATE, READ, UPDATE e DELETE
Dentro da pasta crud, criar a pasta dbOnLine, colocar as estruturas de acesso ao banco de dados
Essa pasta vai guardar os c√≥digos que fazem comunica√ß√£o com banco de dados e ter√° tudo que for comunica√ß√£o com banco de dados

Criar o arquivo de acesso ao banco de dados
Criar o arquivo db.js na pasta dbOnLine

Recortar do server.js e colar no db.js

import pg from "pg";

const pool = new pg.Pool({
  host: process.env.DB_HOST,
  port: process.env.DB_PORT,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_DATABASE,
});

export default pool

No arquivo server.js colar


--------------------------------------------------------------------------------------------
14 PASSO - CRIAR A CLASSE GERAL DAS ROTAS
Dentro da pasta dbOnLine, criar um arquivo DbClass.js
As iniciais em mai√∫sculo, porque iremos criar uma classe nesse arquivo
Esse arquivo ter√° as a√ß√µes comuns para o banco de dados

Colocar no arquivo DbClass.js o c√≥digo abaixo:
import pool from "./db.js";

class DbClass {
  async getAll(table, columns = ["*"]) {
    const colStr = columns.join(", ");
    try {
      const results = (await pool.query(`SELECT ${colStr} FROM ${table}`)).rows;
      return results;
    } catch (error) {
      console.error(
        `Erro ao buscar dados da tabela '${table}':`,
        error.message
      );
      return [];
    }
  }
}

export default DbClass;


export default DbClass;

O ARQUIVO server.js EST√Å ASSIM:
// API significa Application Programing interface
import express from "express";
import cors from "cors";
import "dotenv/config";
import DbClass from "../crud/dbOnline/DbClass.js"; // üëà importa√ß√£o correta

const app = express();

app.use(cors());
app.use(express.json());

// CRIAR A ROTA GET QUE IR√Å COMUNICAR O DB COM SERVIDOR
app.get("/", async (req, res) => {
  const result = await new DbClass().getAll("tarefas");
  res.status(200).send(result);
});

const PORT = 3000;
app.listen(PORT, () => {
  console.log(`Servidor est√° escutando na porta ${PORT}`);
});


--------------------------------------------------------------------------------------------
15 PASSO - CRIAR O ARQUIVO DE ROTAS
Criar a pasta rotas e arquivo rotaTarefas.js
Vamos criar a rota das tarefas:

import { Router } from "express";
import DbClassTarefas from "../dbOnline/DbClassTarefas.js";

const rotas = Router();

rotas.get("/", async (req, res) => {
  try {
    const result = await new DbClassTarefas().getAll();
    res.status(200).send(result);
  } catch (error) {
    console.error("Erro na rota GET /:", error.message);
    res.status(500).json({ erro: "Erro ao buscar tarefas" });
  }
});

export default rotas;


O arquivo server.js, FICA ASSIM:
// API significa Application Programing interface
import express from "express";
import cors from "cors";
import "dotenv/config";
// import DbClass from "../crud/dbOnline/DbClass.js"; // üëà importa√ß√£o correta
import rotaTarefas from "../crud/rotas/rotaTarefas.js";
import path from "path";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
console.log("__dirname", __dirname);

const app = express();
const PORT = 3000;

app.use(express.json());
app.use(cors());

// CRIAR A ROTA GET QUE IR√Å COMUNICAR O DB COM SERVIDOR
// app.get("/", async (req, res) => {
//   const result = await new DbClass().getAll("tarefas");
//   res.status(200).send(result);
// });

app.use("/api/tarefas", rotaTarefas);

app.use(express.static(path.join(__dirname, "../../front-end/dist")));

app.get("*any", (req, res) => {
  res.sendFile(path.join(__dirname, "../../front-end/dist/index.html"));
});

app.listen(PORT, () => {
  console.log(`Servidor est√° escutando na porta ${PORT}`);
});


--------------------------------------------------------------------------------------------
16 PASSO - COLOCAR AS MENSAGENS DE ERRO
Digite na pasta front-end:
npm install toastify-js
reiniciar o front-end com npm run dev


-------------------------------------------------------------------------------------------
17 PACKAGE.JSON global - TALVEZ AQUI PODE DAR ERRO

Na pasta global
Digite no terminal
npm init -y

Alterar o script do package.json global:

"name": "deploy", n√£o fiz isso
Passar o name para deploy, isso √© extremamente importante!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

 "scripts": {
    "build": "npm install --prefix back-end && npm install --prefix front-end && npm run build --prefix front-end",
    "start": "npm run start --prefix back-end"
  },

Essas altera√ß√µes √© para instalar o node_modules no front e back e rodar o vite quando rodar o projeto

Alterar o script do package.json do back-end:
  "scripts": {
    "start": "node ./apiBackEnd/server.js",
    "test": "echo \"Error: no test specified\" && exit 1"
  },

Alterar o script do package.json do front-end:, n√£o fiz isso
No package.json do front-end dele est√° assim:
 "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },


Digite no terminal:
npm run build
npm run start


--------------------------------------------------------------------------------------------
18 PASSO - CRIAR A CLASSE ESPEC√çFICA DAS ROTAS

ARQIOVO DbClassTarefas.js
import DbClass from "./DbClass.js";

class DbClassTarefas extends DbClass {
  // BUSCAR TUDO
  async getAll() {
    try {
      const results = await super.getAll("tarefas", [
        "id",
        "email",
        "nome",
        "tarefa",
      ]);
      return results;
    } catch (error) {
      console.error("Erro ao buscar tarefas:", error.message);
      return [];
    }
  }
}

export default DbClassTarefas;


--------------------------------------------------------------------------------------------
19 PASSO - CRIAR A ROTA NO FRONT-END

import axios from "axios";

const BASE_URL = import.meta.env.VITE_API_URL || "http://localhost:3000/api";

// Buscar todas as tarefas
export async function getAllTask() {
  try {
    const { data } = await axios.get(`${BASE_URL}/tarefas`);
    return data;
  } catch (error) {
    const msg =
      error.response?.data?.erro || // `erro` √© o que sua API devolve
      error.response?.data?.message ||
      error.message ||
      "Erro desconhecido";
    console.error("Erro ao buscar tarefas:", msg);
    return [];
  }
}


--------------------------------------------------------------------------------------------
20 PASSO - NOTIFIC√á√ïES PARA Ok ou CANCELAR
import React from "react";
import { motion, AnimatePresence } from "framer-motion";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faExclamationTriangle } from "@fortawesome/free-solid-svg-icons";

const ModalConfirmacao = ({
  aberto,
  onConfirmar,
  onCancelar,
  children,
  carregando = false,
  titulo = "Confirmar a√ß√£o", // valor padr√£o
}) => {
  return (
    <AnimatePresence>
      {aberto && (
        <motion.div
          className="modal__fundo"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          transition={{ duration: 0.2, ease: "easeOut" }}
        >
          <motion.div
            className="modal__caixa"
            initial={{ y: "-40px", opacity: 0, scale: 0.95 }}
            animate={{ y: 0, opacity: 1, scale: 1 }}
            exit={{ y: "-40px", opacity: 0, scale: 0.95 }}
            transition={{ duration: 0.3, ease: "easeOut" }}
          >
            <h2 style={{ color: "#333" }}>
              <FontAwesomeIcon
                icon={faExclamationTriangle}
                style={{ color: "#e74c3c", marginRight: "8px" }}
              />
              {titulo}
            </h2>

            <div className="modal__mensagem">{children}</div>
            <div className="modal__botoes">
              <button
                className="botao confirmar"
                onClick={onConfirmar}
                disabled={carregando}
              >
                {carregando ? "Salvando..." : "Confirmar"}
              </button>
              <button
                className="botao cancelar"
                onClick={onCancelar}
                disabled={carregando}
              >
                Cancelar
              </button>
            </div>
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  );
};

export default ModalConfirmacao;

ARQUIVO TaskList
import React, { useState } from "react";
import { deleteByIdTask, updateTask } from "../../../apiFrontEnd/tarefas";
import { notificar } from "../../components/Toast";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import {
  faTrash,
  faPencil,
  faSave,
  faTimes,
} from "@fortawesome/free-solid-svg-icons";

import ModalConfirmacao from "../../components/Confirmacao";

const TaskList = ({ tasklist, setTasklist, carregarTarefas }) => {
  const [modalAberto, setModalAberto] = useState(false);
  const [tarefaSelecionada, setTarefaSelecionada] = useState(null);
  const [carregando, setCarregando] = useState(false);
  const [modoEdicaoId, setModoEdicaoId] = useState(null);
  const [textoEditado, setTextoEditado] = useState("");

  const [modalConfirmarEdicao, setModalConfirmarEdicao] = useState(false);
  const [tarefaParaEditar, setTarefaParaEditar] = useState(null);

  const pedirConfirmacao = (task) => {
    setTarefaSelecionada(task);
    setModalAberto(true);
  };

  const confirmarRemocao = async () => {
    if (!tarefaSelecionada) return;

    setCarregando(true);
    const sucesso = await deleteByIdTask(tarefaSelecionada);
    setCarregando(false);
    setModalAberto(false);

    if (sucesso) {
      await carregarTarefas();
      notificar("sucesso", "Tarefa exclu√≠da com sucesso!");
    } else {
      notificar("erro", "Tarefa n√£o encontrada");
    }

    setTarefaSelecionada(null);
  };

  const iniciarEdicao = (task) => {
    setModoEdicaoId(task.id);
    setTextoEditado(task.tarefa);
  };

  const cancelarEdicao = () => {
    setModoEdicaoId(null);
    setTextoEditado("");
  };

  return (
    <div className="task__list">
      {tasklist.map((task) => (
        <div className="task__list-item" key={`task-${task.id}`}>
          {modoEdicaoId === task.id ? (
            <>
              <input
                className="input__edit"
                value={textoEditado}
                onChange={(e) => setTextoEditado(e.target.value)}
              />
              <div className="button__task">
                <button
                  className="button__save"
                  onClick={() => {
                    setTarefaParaEditar({
                      ...task,
                      tarefa: textoEditado.trim(),
                    });
                    setModalConfirmarEdicao(true);
                  }}
                >
                  <FontAwesomeIcon icon={faSave} />
                </button>

                <button className="button__cancel" onClick={cancelarEdicao}>
                  <FontAwesomeIcon icon={faTimes} />
                </button>
              </div>
            </>
          ) : (
            <>
              <p>{task.tarefa}</p>

              <div className="button__task">
                <button
                  className="button__edit"
                  onClick={() => iniciarEdicao(task)}
                >
                  <FontAwesomeIcon icon={faPencil} />
                </button>
                <button
                  className="button__remove"
                  onClick={() => pedirConfirmacao(task)}
                >
                  <FontAwesomeIcon icon={faTrash} />
                </button>
              </div>
            </>
          )}
        </div>
      ))}

      {/* Modal de exclus√£o */}
      <ModalConfirmacao
        aberto={modalAberto}
        onConfirmar={confirmarRemocao}
        onCancelar={() => setModalAberto(false)}
        carregando={carregando}
        titulo="Confirmar exclus√£o"
      >
        <span>
          Tem certeza que deseja excluir{" "}
          <strong>{tarefaSelecionada?.tarefa}</strong> de{" "}
          <strong>{tarefaSelecionada?.nome}</strong>?
        </span>
      </ModalConfirmacao>

      {/* Modal de edi√ß√£o com confirma√ß√£o */}
      <ModalConfirmacao
        aberto={modalConfirmarEdicao}
        // onConfirmar={async () => {
        //   if (!tarefaParaEditar || !tarefaParaEditar.tarefa) return;

        //   try {
        //     const sucesso = await updateTask(tarefaParaEditar);
        //     if (sucesso) {
        //       await carregarTarefas();
        //       notificar("sucesso", "Tarefa atualizada com sucesso!");
        //     }
        //   } catch (error) {
        //     notificar("erro", "Erro ao atualizar tarefa.");
        //   }

        //   setModoEdicaoId(null);
        //   setTextoEditado("");
        //   setTarefaParaEditar(null);
        //   setModalConfirmarEdicao(false);
        // }}

        onConfirmar={async () => {
          if (!tarefaParaEditar || !tarefaParaEditar.tarefa) return;

          setCarregando(true);

          try {
            const sucesso = await updateTask(tarefaParaEditar);
            if (sucesso) {
              await carregarTarefas();
              notificar("sucesso", "Tarefa atualizada com sucesso!");
            }
          } catch (error) {
            notificar("erro", "Erro ao atualizar tarefa.");
          }

          setCarregando(false);
          setModoEdicaoId(null);
          setTextoEditado("");
          setTarefaParaEditar(null);
          setModalConfirmarEdicao(false);
        }}
        onCancelar={() => setModalConfirmarEdicao(false)}
        titulo="Confirmar edi√ß√£o"
        carregando={carregando}
      >
        <span>
          Tem certeza que deseja salvar a tarefa como{" "}
          <strong>{tarefaParaEditar?.tarefa}</strong>?
        </span>
      </ModalConfirmacao>
    </div>
  );
};

export default TaskList;


--------------------------------------------------------------------------------------------
21 PASSO - ALTERAR O NODEMON 

****Alterar no packge.json do back-end, retirar o nodemon, n√£o √© aceito na produ√ß√£o

 "scripts": {
    "start": "node ./apiBack/server.js",
    "test": "echo \"Error: no test specified\" && exit 1"
  },


--------------------------------------------------------------------------------------------
22 PASSO - C√ìDIGO PARA MANDAR PARA INDEX.HTML
Ir para pasta back-end, digite no terminal
npm i path

Na pasta back-end criar o arquivo test.js
import path, { dirname } from "path";

const __dirname = path.resolve();
console.log(__dirname);

E rodar no back-end
node ./test.js

Vai d√° a pasta que est√° executando: C:\Users\Daniel\Documents\Software\VIVEIRO_Limeira\back-end>

Depois colocar o arquivo test.js dentro de api e rodar: node .\api\test.js
Vai d√° a pasta que est√° executando: C:\Users\Daniel\Documents\Software\VIVEIRO_Limeira\back-end>

Pode recortar o conte√∫do do arquivo test.js e colar no arquivo server.js
// API significa Application Programing interface
// POST, GET, PUT, DELETE
// CRUD - CREATE, READ, UPDATE e DELETE
// Endpoint
// Middleware, para resolver o problema do front e back que est√£o em portas diferentes, import cors from "cors";

// API significa Application Programing interface
import express from "express";
import cors from "cors";
import "dotenv/config";
// import DbClass from "../crud/dbOnline/DbClass.js"; // üëà importa√ß√£o correta
import rotaTarefas from "../crud/rotas/rotaTarefas.js";
import path from "path";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
// console.log("__dirname", __dirname);

const app = express();
const PORT = 3000;

app.use(express.json());
app.use(cors());

// CRIAR A ROTA GET QUE IR√Å COMUNICAR O DB COM SERVIDOR
// app.get("/", async (req, res) => {
//   const result = await new DbClass().getAll("tarefas");
//   res.status(200).send(result);
// });

app.use("/api/tarefas", rotaTarefas);

app.use(express.static(path.join(__dirname, "../../front-end/dist")));

app.get("*any", (req, res) => {
  res.sendFile(path.join(__dirname, "../../front-end/dist/index.html"));
});

app.listen(PORT, () => {
  console.log(`Servidor est√° escutando na porta ${PORT}`);
});

--------------------------------------------------------------------------------------------
23 PASSO - NPM RUN BUIL e START
Ir para pasta global
Agora rodar npm run build, precisa estar na pasta m√£e
Agora rodar npm run start, precisa estar na pasta m√£e

Rodar git add . , precisa estar na pasta m√£e
Rodar git commit -m "" . , precisa estar na pasta m√£e
Rodar git push . , precisa estar na pasta m√£e


--------------------------------------------------------------------------------------------
24 PASSO - DEPLOY DO PROJETO NO RENDER
V√° em + Add new
Clicar em Web Service
Clicar no projeto, vai aparecer as op√ß√µes
Em Build Command: npm run build
Em Start Command: npm run start
Selecionar free
Clicar em deploy web service


--------------------------------------------------------------------------------------------
25 PASSO - DEPLOY DO BANDO DE DADOS NO RENDER
Cadastrar o banco de dados no Render
V√° em dashboard
Em + Add New, clique e postgres
Coloque o nome do banco de dados
Clicar em Free
Deixar os outros campos como est√£o
Clicar em create database
V√° em dashboard
Clicar no banco e dados
Clicar em connect
Copiar o caminho
postgresql://viveirolimeira_user:HH73wLSYoxZAbyROuUhSF85Cy80ZdMQ8@dpg-d10r7qq4d50c73b3o320-a/viveirolimeira
V√° em dashboard
Clique no projeto
Crie uma vari√°vel de ambiente
Key: DATABASE_URL                        Valor: postgresql://viveirolimeira_x8xq_user:TJxkazEOmmVCI8hyvM6Tv6JqhmbxGr9Q@dpg-d17i23p5pdvs738dqvqg-a/viveirolimeira_x8xq
Clique em salvar


--------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------